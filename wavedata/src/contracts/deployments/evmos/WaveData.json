{
  "address": "0xf940e49Bf5Ba991F3f619ecdA97f34a149675D7B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        }
      ],
      "name": "CheckEmail",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "full_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "password",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "accesstoken",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "walletaddress_address",
          "type": "address"
        }
      ],
      "name": "CreateAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "survey_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        }
      ],
      "name": "CreateCompletedSurveys",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "given_permission",
          "type": "string"
        }
      ],
      "name": "CreateOngoingTrail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "survey_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "CreateOrSaveSections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "survey_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "section_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "question_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "answer",
          "type": "string"
        }
      ],
      "name": "CreateQuestionAnswer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "CreateSurvey",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        }
      ],
      "name": "CreateSurveyCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "permission",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "contributors",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "audience",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "budget",
          "type": "uint256"
        }
      ],
      "name": "CreateTrial",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        }
      ],
      "name": "GetOngoingTrial",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "password",
          "type": "string"
        }
      ],
      "name": "Login",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "accesstoken",
          "type": "string"
        }
      ],
      "name": "UpdateAccessToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "audience_info",
          "type": "string"
        }
      ],
      "name": "UpdateAudience",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "family_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "given_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "identifier",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "phone",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "gender",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "about",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "patient_id",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "walletaddress_address",
          "type": "address"
        }
      ],
      "name": "UpdateFhir",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "privatekey",
          "type": "string"
        }
      ],
      "name": "UpdatePrivatekey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reward_type",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reward_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total_spending_limit",
          "type": "uint256"
        }
      ],
      "name": "UpdateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "survey_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "UpdateSurvey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "budget",
          "type": "uint256"
        }
      ],
      "name": "UpdateTrial",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "credits",
          "type": "uint256"
        }
      ],
      "name": "UpdateUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithDrawAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_AnsweredIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_CompletedSurveyIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_FhirIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_OngoingIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_SurveyCategoryIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_SurveyIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_TrialIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_UserIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_categoryMap",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_completedsurveyMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "completed_survey_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "survey_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_fhirMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "family_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "given_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "identifier",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "phone",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "gender",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "about",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "patient_id",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_ongoingMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ongoing_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "given_permission",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_questionanswerdMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "answer_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "survey_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "section_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "question_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "answer",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_sectionsMap",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_surveyMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "survey_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "submission",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_trialAudienceMap",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_trialMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "permission",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "contributors",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "audience",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "budget",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "reward_type",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reward_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total_spending_limit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "survey_id",
          "type": "uint256"
        }
      ],
      "name": "delete_a_servey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        }
      ],
      "name": "delete_a_trial",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        }
      ],
      "name": "getAllCompletedSurveysIDByUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trial_id",
          "type": "uint256"
        }
      ],
      "name": "getAllSurveysIDByTrial",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        }
      ],
      "name": "getUserAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        }
      ],
      "name": "getUserDetails",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset_all",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "user_id",
          "type": "uint256"
        }
      ],
      "name": "reset_app",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x462d2f9a5cdcf55779675c7052e4cce5443a3cb1a9095c671030230480f88624",
  "receipt": {
    "to": null,
    "from": "0xa41778cDBefa941beD7dd6ac25Ff0a4ADd79B677",
    "contractAddress": "0xf940e49Bf5Ba991F3f619ecdA97f34a149675D7B",
    "transactionIndex": 0,
    "gasUsed": "4740298",
    "logsBloom": "0x
    "blockHash": "0xe5b892101f0c709affd613d2ffaa6696ba6a6db3b391b931157c35d1cf11a052",
    "transactionHash": "0x462d2f9a5cdcf55779675c7052e4cce5443a3cb1a9095c671030230480f88624",
    "logs": [],
    "blockNumber": 14779045,
    "cumulativeGasUsed": "4740298",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "cd4209d2fc66f90ac5214531a021eab8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"}],\"name\":\"CheckEmail\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"full_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"accesstoken\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"walletaddress_address\",\"type\":\"address\"}],\"name\":\"CreateAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"survey_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"}],\"name\":\"CreateCompletedSurveys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"given_permission\",\"type\":\"string\"}],\"name\":\"CreateOngoingTrail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"survey_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"CreateOrSaveSections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"survey_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"section_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"question_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"answer\",\"type\":\"string\"}],\"name\":\"CreateQuestionAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"CreateSurvey\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"name\":\"CreateSurveyCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"permission\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"contributors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"audience\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"}],\"name\":\"CreateTrial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"}],\"name\":\"GetOngoingTrial\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"Login\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"accesstoken\",\"type\":\"string\"}],\"name\":\"UpdateAccessToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"audience_info\",\"type\":\"string\"}],\"name\":\"UpdateAudience\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"family_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"given_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phone\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gender\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"about\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"patient_id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"walletaddress_address\",\"type\":\"address\"}],\"name\":\"UpdateFhir\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"privatekey\",\"type\":\"string\"}],\"name\":\"UpdatePrivatekey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reward_type\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_spending_limit\",\"type\":\"uint256\"}],\"name\":\"UpdateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"survey_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"UpdateSurvey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"}],\"name\":\"UpdateTrial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"credits\",\"type\":\"uint256\"}],\"name\":\"UpdateUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithDrawAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_AnsweredIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CompletedSurveyIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_FhirIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OngoingIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_SurveyCategoryIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_SurveyIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TrialIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_UserIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_categoryMap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_completedsurveyMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"completed_survey_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"survey_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_fhirMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"family_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"given_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phone\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gender\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"about\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"patient_id\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ongoingMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ongoing_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"given_permission\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_questionanswerdMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"answer_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"survey_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"section_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"question_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"answer\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_sectionsMap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_surveyMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"survey_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"submission\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_trialAudienceMap\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_trialMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"permission\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"contributors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"audience\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reward_type\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_spending_limit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"survey_id\",\"type\":\"uint256\"}],\"name\":\"delete_a_servey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"}],\"name\":\"delete_a_trial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"}],\"name\":\"getAllCompletedSurveysIDByUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trial_id\",\"type\":\"uint256\"}],\"name\":\"getAllSurveysIDByTrial\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"}],\"name\":\"getUserAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"}],\"name\":\"getUserDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset_all\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"}],\"name\":\"reset_app\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_categoryMap(uint256)\":{\"notice\":\"The map of all the Survey Category .\"},\"_completedsurveyMap(uint256)\":{\"notice\":\"The map of all the Completed Surveys.\"},\"_fhirMap(uint256)\":{\"notice\":\"The map of all the FHIR information.\"},\"_ongoingMap(uint256)\":{\"notice\":\"The map of all the OnGoing Trials.\"},\"_questionanswerdMap(uint256)\":{\"notice\":\"The map of all the Question Answerd in a Survey.\"},\"_sectionsMap(uint256)\":{\"notice\":\"The map of all the Survey Sections  .\"},\"_surveyMap(uint256)\":{\"notice\":\"The map of all the Surveys information.\"},\"_trialAudienceMap(uint256)\":{\"notice\":\"The map of all the Rewards information.\"},\"_trialMap(uint256)\":{\"notice\":\"The map of all the Trials information.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WaveData.sol\":\"WaveData\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/WaveData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract WaveData {\\r\\n    /// User contains all the login information\\r\\n    struct user_struct {\\r\\n        /// The ID of the User ID.\\r\\n        uint256 user_id;\\r\\n        ///Full Name of user\\r\\n        string name;\\r\\n        ///Email of user\\r\\n        string email;\\r\\n        ///Password of user\\r\\n        string password;\\r\\n        ///Address of Wallet in Address Type\\r\\n        address walletaddress_address;\\r\\n        ///Privatekey of user\\r\\n        string privatekey;\\r\\n        /// The User Image\\r\\n        string image;\\r\\n        /// The User Credits\\r\\n        uint256 credits;\\r\\n        /// The Access Token of wearable\\r\\n        string accesstoken;\\r\\n        /// The Fhir ID of the User.\\r\\n        uint256 fhirid;\\r\\n    }\\r\\n\\r\\n    /// Survy Category Struct contains all the Category information\\r\\n    struct survey_category_struct {\\r\\n        ///Name of Category\\r\\n        string name;\\r\\n        ///Image Link of Category\\r\\n        string image;\\r\\n    }\\r\\n\\r\\n    /// Trial Struct contains all the trial information\\r\\n    struct trial_struct {\\r\\n        /// The ID of the Trial ID.\\r\\n        uint256 trial_id;\\r\\n        /// The ID of the User ID.\\r\\n        uint256 user_id;\\r\\n        /// The Image of the Trial\\r\\n        string image;\\r\\n        /// The Title of the Trial\\r\\n        string title;\\r\\n        /// The Description of the Trial\\r\\n        string description;\\r\\n        /// The Data permission of the Trial\\r\\n        string permission;\\r\\n        /// The Contributors of the Trial\\r\\n        uint256 contributors;\\r\\n        /// The Audience of the Trial\\r\\n        uint256 audience;\\r\\n        /// The Budget of the Trial\\r\\n        uint256 budget;\\r\\n        /// The Type of the Reward.\\r\\n        string reward_type;\\r\\n        /// The Price of the Reward.\\r\\n        uint256 reward_price;\\r\\n        /// The Total Spending Limit of the Trial.\\r\\n        uint256 total_spending_limit;\\r\\n    }\\r\\n\\r\\n    /// Survey Struct contains all the survey information\\r\\n    struct survey_struct {\\r\\n        /// The ID of the Survey ID.\\r\\n        uint256 survey_id;\\r\\n        /// The ID of the Trial ID.\\r\\n        uint256 trial_id;\\r\\n        /// The ID of the User ID.\\r\\n        uint256 user_id;\\r\\n        /// The Name of the Survey\\r\\n        string name;\\r\\n        /// The Description of the Survey\\r\\n        string description;\\r\\n        /// The Date of the Survey\\r\\n        string date;\\r\\n        /// The Image of the Survey\\r\\n        string image;\\r\\n        /// The Reward of the Survey\\r\\n        uint256 reward;\\r\\n        /// The Submission of the Survey\\r\\n        uint256 submission;\\r\\n    }\\r\\n\\r\\n    /// FHIR user information\\r\\n    struct fhir_struct {\\r\\n        /// User ID of the user\\r\\n        uint256 user_id;\\r\\n        /// Family Name in FHIR\\r\\n        string family_name;\\r\\n        /// Given Name in FHIR\\r\\n        string given_name;\\r\\n        /// Identifier of the user FHIR\\r\\n        string identifier;\\r\\n        /// Phone of the user FHIR\\r\\n        string phone;\\r\\n        /// Gender of the user FHIR\\r\\n        string gender;\\r\\n        /// About of the user FHIR\\r\\n        string about;\\r\\n        /// The Patient ID of the user FHIR\\r\\n        string patient_id;\\r\\n    }\\r\\n\\r\\n    /// OnGoing Trial\\r\\n    struct ongoing_struct {\\r\\n        uint256 ongoing_id;\\r\\n        uint256 trial_id;\\r\\n        uint256 user_id;\\r\\n        string date;\\r\\n        string given_permission;\\r\\n    }\\r\\n\\r\\n    /// Question Answers of Survey\\r\\n    struct survey_question_answer_struct {\\r\\n        uint256 answer_id;\\r\\n        uint256 trial_id;\\r\\n        uint256 user_id;\\r\\n        uint256 survey_id;\\r\\n        string section_id;\\r\\n        string question_id;\\r\\n        string answer;\\r\\n    }\\r\\n\\r\\n    /// Completed Survey Trial\\r\\n    struct completed_survey_struct {\\r\\n        uint256 completed_survey_id;\\r\\n        uint256 trial_id;\\r\\n        uint256 user_id;\\r\\n        uint256 survey_id;\\r\\n        string date;\\r\\n    }\\r\\n    /// Paid Survey Trial\\r\\n    struct paid_survey_struct {\\r\\n        uint256 paid_survey_id;\\r\\n        uint256 trial_id;\\r\\n        uint256 user_id;\\r\\n        uint256 survey_id;\\r\\n        string date;\\r\\n    }\\r\\n\\r\\n    uint256 public _UserIds;\\r\\n    uint256 public _FhirIds;\\r\\n    uint256 public _TrialIds;\\r\\n    uint256 public _SurveyIds;\\r\\n    uint256 public _SurveyCategoryIds;\\r\\n    uint256 public _OngoingIds;\\r\\n    uint256 public _AnsweredIds;\\r\\n    uint256 public _CompletedSurveyIds;\\r\\n\\r\\n    /// The map of all the Users login information.\\r\\n    mapping(uint256 => user_struct) private _userMap;\\r\\n    /// The map of all the Trials information.\\r\\n    mapping(uint256 => trial_struct) public _trialMap;\\r\\n    /// The map of all the Rewards information.\\r\\n    mapping(uint256 => string) public _trialAudienceMap; //trial id => Audience JSON\\r\\n    /// The map of all the Surveys information.\\r\\n    mapping(uint256 => survey_struct) public _surveyMap;\\r\\n    /// The map of all the Survey Category .\\r\\n    mapping(uint256 => survey_category_struct) public _categoryMap;\\r\\n    /// The map of all the Survey Sections  .\\r\\n    mapping(uint256 => string) public _sectionsMap; //Survey id => All sections\\r\\n\\r\\n    /// The map of all the FHIR information.\\r\\n    mapping(uint256 => fhir_struct) public _fhirMap; //User id => user FHIR\\r\\n    /// The map of all the OnGoing Trials.\\r\\n    mapping(uint256 => ongoing_struct) public _ongoingMap;\\r\\n    /// The map of all the Question Answerd in a Survey.\\r\\n    mapping(uint256 => survey_question_answer_struct)\\r\\n        public _questionanswerdMap;\\r\\n    /// The map of all the Completed Surveys.\\r\\n    mapping(uint256 => completed_survey_struct) public _completedsurveyMap;\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    //Login User\\r\\n    function CheckEmail(\\r\\n        string memory email\\r\\n    ) public view returns (string memory) {\\r\\n        ///Getting the found account\\r\\n        for (uint256 i = 0; i < _UserIds; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(_userMap[i].email)) == keccak256(bytes(email))\\r\\n            ) {\\r\\n                ///Returning user id\\r\\n                return Strings.toString(i);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ///Returning False if not found user\\r\\n        return \\\"False\\\";\\r\\n    }\\r\\n\\r\\n    //CreateAccount\\r\\n    function CreateAccount(\\r\\n        string memory full_name,\\r\\n        string memory email,\\r\\n        string memory password,\\r\\n        string memory accesstoken,\\r\\n        address walletaddress_address\\r\\n    ) public {\\r\\n        // Store the metadata of user in the map.\\r\\n        _userMap[_UserIds] = user_struct({\\r\\n            user_id: _UserIds,\\r\\n            name: full_name,\\r\\n            email: email,\\r\\n            password: password,\\r\\n            privatekey: \\\"\\\",\\r\\n            image: \\\"https://i.postimg.cc/SsxGw5cZ/person.jpg\\\",\\r\\n            credits: 0,\\r\\n            accesstoken: accesstoken,\\r\\n            fhirid: 0,\\r\\n            walletaddress_address: walletaddress_address\\r\\n        });\\r\\n        _UserIds++;\\r\\n    }\\r\\n\\r\\n    //Update Privatekey\\r\\n    function UpdatePrivatekey(uint256 userid, string memory privatekey) public {\\r\\n        _userMap[userid].privatekey = privatekey;\\r\\n    }\\r\\n\\r\\n    //Update AccessToken\\r\\n    function UpdateAccessToken(\\r\\n        uint256 userid,\\r\\n        string memory accesstoken\\r\\n    ) public {\\r\\n        _userMap[userid].accesstoken = accesstoken;\\r\\n    }\\r\\n\\r\\n    //Login User\\r\\n    function Login(\\r\\n        string memory email,\\r\\n        string memory password\\r\\n    ) public view returns (string memory) {\\r\\n        ///Getting the found account\\r\\n        for (uint256 i = 0; i < _UserIds; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(_userMap[i].email)) ==\\r\\n                keccak256(bytes(email)) &&\\r\\n                keccak256(bytes(_userMap[i].password)) ==\\r\\n                keccak256(bytes(password))\\r\\n            ) {\\r\\n                ///Returning user id\\r\\n                return Strings.toString(i);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        ///Returning False if not found user\\r\\n        return \\\"False\\\";\\r\\n    }\\r\\n\\r\\n    //Create Trial\\r\\n    function CreateTrial(\\r\\n        uint256 user_id,\\r\\n        string memory image,\\r\\n        string memory title,\\r\\n        string memory description,\\r\\n        string memory permission,\\r\\n        uint256 contributors,\\r\\n        uint256 audience,\\r\\n        uint256 budget\\r\\n    ) public {\\r\\n        // Store the metadata of Trial in the map.\\r\\n        _trialMap[_TrialIds] = trial_struct({\\r\\n            trial_id: _TrialIds,\\r\\n            user_id: user_id,\\r\\n            image: image,\\r\\n            title: title,\\r\\n            description: description,\\r\\n            permission: permission,\\r\\n            contributors: contributors,\\r\\n            audience: audience,\\r\\n            budget: budget,\\r\\n            reward_type: \\\"tEVMOS\\\",\\r\\n            reward_price: 0,\\r\\n            total_spending_limit: budget\\r\\n        });\\r\\n\\r\\n        _TrialIds++;\\r\\n    }\\r\\n\\r\\n    //Create Survey\\r\\n    function CreateSurvey(\\r\\n        uint256 trial_id,\\r\\n        uint256 user_id,\\r\\n        string memory name,\\r\\n        string memory description,\\r\\n        string memory date,\\r\\n        string memory image,\\r\\n        uint256 reward\\r\\n    ) public payable {\\r\\n        // Store the metadata of Survey in the map.\\r\\n        _surveyMap[_SurveyIds] = survey_struct({\\r\\n            survey_id: _SurveyIds,\\r\\n            trial_id: trial_id,\\r\\n            user_id: user_id,\\r\\n            name: name,\\r\\n            description: description,\\r\\n            date: date,\\r\\n            image: image,\\r\\n            reward: reward,\\r\\n            submission: 0\\r\\n        });\\r\\n        _SurveyIds++;\\r\\n    }\\r\\n\\r\\n    //Create or Save Sections\\r\\n    function CreateOrSaveSections(\\r\\n        uint256 survey_id,\\r\\n        string memory metadata\\r\\n    ) public {\\r\\n        // Store the metadata of all Sections in the map.\\r\\n        _sectionsMap[survey_id] = metadata;\\r\\n    }\\r\\n\\r\\n    //Create Survey Category\\r\\n    function CreateSurveyCategory(\\r\\n        string memory name,\\r\\n        string memory image\\r\\n    ) public {\\r\\n        // Store the metadata of Survey Category in the map.\\r\\n        _categoryMap[_SurveyCategoryIds] = survey_category_struct({\\r\\n            name: name,\\r\\n            image: image\\r\\n        });\\r\\n        _SurveyCategoryIds++;\\r\\n    }\\r\\n\\r\\n    //Get All Survey by Trial ID\\r\\n    function getAllSurveysIDByTrial(\\r\\n        uint256 trial_id\\r\\n    ) public view returns (uint256[] memory) {\\r\\n        uint256 _TemporarySearch = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < _SurveyIds; i++) {\\r\\n            if (_surveyMap[i].trial_id == trial_id) {\\r\\n                _TemporarySearch++;\\r\\n            }\\r\\n        }\\r\\n        uint256[] memory _SearchedStore = new uint256[](_TemporarySearch);\\r\\n\\r\\n        uint256 _SearchIds2 = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < _SurveyIds; i++) {\\r\\n            if (_surveyMap[i].trial_id == trial_id) {\\r\\n                _SearchedStore[_SearchIds2] = i;\\r\\n                _SearchIds2++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return _SearchedStore;\\r\\n    }\\r\\n\\r\\n    // Get user wallet address by userid\\r\\n    function getUserAddress(uint256 user_id) public view returns (address) {\\r\\n        return (_userMap[user_id].walletaddress_address);\\r\\n    }\\r\\n\\r\\n    //Get UserDetails by userid\\r\\n    function getUserDetails(\\r\\n        uint256 user_id\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            string memory,\\r\\n            uint256,\\r\\n            string memory,\\r\\n            string memory,\\r\\n            string memory,\\r\\n            string memory,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            _userMap[user_id].image,\\r\\n            _userMap[user_id].credits,\\r\\n            _userMap[user_id].name,\\r\\n            _userMap[user_id].email,\\r\\n            _userMap[user_id].privatekey,\\r\\n            _userMap[user_id].accesstoken,\\r\\n            _userMap[user_id].fhirid\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //Update Trial\\r\\n    function UpdateTrial(\\r\\n        uint256 trial_id,\\r\\n        string memory image,\\r\\n        string memory title,\\r\\n        string memory description,\\r\\n        uint256 budget\\r\\n    ) public {\\r\\n        // Update the metadata of Trial in the map.\\r\\n        _trialMap[trial_id].image = image;\\r\\n        _trialMap[trial_id].title = title;\\r\\n        _trialMap[trial_id].description = description;\\r\\n        _trialMap[trial_id].budget = budget;\\r\\n    }\\r\\n\\r\\n    //Update Survey\\r\\n    function UpdateSurvey(\\r\\n        uint256 survey_id,\\r\\n        string memory name,\\r\\n        string memory description,\\r\\n        string memory image,\\r\\n        uint256 reward\\r\\n    ) public {\\r\\n        // Update the metadata of Survey in the map.\\r\\n        _surveyMap[survey_id].name = name;\\r\\n        _surveyMap[survey_id].description = description;\\r\\n        _surveyMap[survey_id].image = image;\\r\\n        _surveyMap[survey_id].reward = reward;\\r\\n    }\\r\\n\\r\\n    //Update Reward\\r\\n    function UpdateReward(\\r\\n        uint256 trial_id,\\r\\n        string memory reward_type,\\r\\n        uint256 reward_price,\\r\\n        uint256 total_spending_limit\\r\\n    ) public {\\r\\n        // Update the metadata of Trial in the map.\\r\\n        _trialMap[trial_id].reward_type = reward_type;\\r\\n        _trialMap[trial_id].reward_price = reward_price;\\r\\n        _trialMap[trial_id].total_spending_limit = total_spending_limit;\\r\\n    }\\r\\n\\r\\n    //Update Audience\\r\\n    function UpdateAudience(\\r\\n        uint256 trial_id,\\r\\n        string memory audience_info\\r\\n    ) public {\\r\\n        // Update the metadata of Audience in the map.\\r\\n        _trialAudienceMap[trial_id] = audience_info;\\r\\n    }\\r\\n\\r\\n    //Update User\\r\\n    function UpdateUser(\\r\\n        uint256 user_id,\\r\\n        string memory image,\\r\\n        uint256 credits\\r\\n    ) public {\\r\\n        // Update the metadata of User in the map\\r\\n        _userMap[user_id].image = image;\\r\\n        _userMap[user_id].credits = credits;\\r\\n    }\\r\\n\\r\\n    //Update FHIR\\r\\n    function UpdateFhir(\\r\\n        uint256 user_id,\\r\\n        string memory family_name,\\r\\n        string memory given_name,\\r\\n        string memory identifier,\\r\\n        string memory phone,\\r\\n        string memory gender,\\r\\n        string memory about,\\r\\n        string memory patient_id,\\r\\n        address walletaddress_address\\r\\n    ) public {\\r\\n        // Update the metadata of FHIR in the map.\\r\\n        _fhirMap[user_id].user_id = user_id;\\r\\n        _fhirMap[user_id].family_name = family_name;\\r\\n        _fhirMap[user_id].given_name = given_name;\\r\\n        _fhirMap[user_id].identifier = identifier;\\r\\n        _fhirMap[user_id].phone = phone;\\r\\n        _fhirMap[user_id].gender = gender;\\r\\n        _fhirMap[user_id].about = about;\\r\\n        _fhirMap[user_id].patient_id = patient_id;\\r\\n        _userMap[user_id].walletaddress_address = walletaddress_address;\\r\\n    }\\r\\n\\r\\n    function CreateOngoingTrail(\\r\\n        uint256 trial_id,\\r\\n        uint256 user_id,\\r\\n        string memory date,\\r\\n        string memory given_permission\\r\\n    ) public {\\r\\n        // Store the metadata of Ongoing Trial in the map.\\r\\n        _ongoingMap[_OngoingIds] = ongoing_struct({\\r\\n            ongoing_id: _OngoingIds,\\r\\n            trial_id: trial_id,\\r\\n            user_id: user_id,\\r\\n            date: date,\\r\\n            given_permission: given_permission\\r\\n        });\\r\\n        _trialMap[trial_id].contributors += 1;\\r\\n        _OngoingIds++;\\r\\n    }\\r\\n\\r\\n    function GetOngoingTrial(\\r\\n        uint256 user_id\\r\\n    ) public view returns (string memory) {\\r\\n        ///Getting the found Ongoing Trial\\r\\n        for (uint256 i = 0; i < _OngoingIds; i++) {\\r\\n            if (_ongoingMap[i].user_id == user_id) {\\r\\n                ///Returning Trial id\\r\\n                return Strings.toString(_ongoingMap[i].trial_id);\\r\\n            }\\r\\n        }\\r\\n        ///Returning False if not found\\r\\n        return \\\"False\\\";\\r\\n    }\\r\\n\\r\\n    function CreateQuestionAnswer(\\r\\n        uint256 trial_id,\\r\\n        uint256 user_id,\\r\\n        uint256 survey_id,\\r\\n        string memory section_id,\\r\\n        string memory question_id,\\r\\n        string memory answer\\r\\n    ) public {\\r\\n        // Store the metadata of Question Answered in the map.\\r\\n        _questionanswerdMap[_AnsweredIds] = survey_question_answer_struct({\\r\\n            answer_id: _AnsweredIds,\\r\\n            trial_id: trial_id,\\r\\n            user_id: user_id,\\r\\n            survey_id: survey_id,\\r\\n            section_id: section_id,\\r\\n            question_id: question_id,\\r\\n            answer: answer\\r\\n        });\\r\\n        _AnsweredIds++;\\r\\n    }\\r\\n\\r\\n    function CreateCompletedSurveys(\\r\\n        uint256 survey_id,\\r\\n        uint256 user_id,\\r\\n        string memory date,\\r\\n        uint256 trial_id\\r\\n    ) public {\\r\\n        // Store the metadata of Completed Survyes in the map.\\r\\n        _completedsurveyMap[_CompletedSurveyIds] = completed_survey_struct({\\r\\n            completed_survey_id: _CompletedSurveyIds,\\r\\n            trial_id: trial_id,\\r\\n            user_id: user_id,\\r\\n            survey_id: survey_id,\\r\\n            date: date\\r\\n        });\\r\\n        _surveyMap[survey_id].submission += 1;\\r\\n        _surveyMap[survey_id].date = date;\\r\\n        _CompletedSurveyIds++;\\r\\n    }\\r\\n\\r\\n    function WithDrawAmount(uint256 userid, uint256 amount) public {\\r\\n        (bool sent, ) = payable(_userMap[userid].walletaddress_address).call{\\r\\n            value: amount\\r\\n        }(\\\"\\\");\\r\\n\\r\\n        require(sent, \\\"Send failed\\\");\\r\\n        _userMap[userid].credits -= amount;\\r\\n    }\\r\\n\\r\\n    function getAllCompletedSurveysIDByUser(\\r\\n        uint256 user_id\\r\\n    ) public view returns (uint256[] memory) {\\r\\n        // Getting all completed surveys id by user id\\r\\n        uint256 _TemporarySearch = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < _CompletedSurveyIds; i++) {\\r\\n            if (_completedsurveyMap[i].user_id == user_id) {\\r\\n                _TemporarySearch++;\\r\\n            }\\r\\n        }\\r\\n        uint256[] memory _SearchedStore = new uint256[](_TemporarySearch);\\r\\n\\r\\n        uint256 _SearchIds2 = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < _CompletedSurveyIds; i++) {\\r\\n            if (_completedsurveyMap[i].user_id == user_id) {\\r\\n                _SearchedStore[_SearchIds2] = i;\\r\\n                _SearchIds2++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return _SearchedStore;\\r\\n    }\\r\\n\\r\\n    function delete_a_trial(uint256 trial_id) public {\\r\\n        // Delete all things related to a trial by trial id\\r\\n        delete _trialMap[trial_id];\\r\\n        delete _trialAudienceMap[trial_id];\\r\\n        for (uint256 i = 0; i < _SurveyIds; i++) {\\r\\n            if (_surveyMap[i].trial_id == trial_id) delete_a_servey(i);\\r\\n        }\\r\\n        for (uint256 i = 0; i < _OngoingIds; i++) {\\r\\n            if (_ongoingMap[i].trial_id == trial_id) delete _ongoingMap[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function delete_a_servey(uint256 survey_id) public {\\r\\n        // Delete all things related to a survey by survey id\\r\\n        delete _surveyMap[survey_id];\\r\\n        delete _sectionsMap[survey_id];\\r\\n        for (uint256 i = 0; i < _AnsweredIds; i++) {\\r\\n            if (_questionanswerdMap[i].survey_id == survey_id)\\r\\n                delete _questionanswerdMap[i];\\r\\n        }\\r\\n        for (uint256 i = 0; i < _CompletedSurveyIds; i++) {\\r\\n            if (_completedsurveyMap[i].survey_id == survey_id)\\r\\n                delete _completedsurveyMap[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset_all() public {\\r\\n        for (uint256 i = 0; i < _UserIds; i++) delete _userMap[i];\\r\\n        for (uint256 i = 0; i < _TrialIds; i++) delete _trialMap[i];\\r\\n        for (uint256 i = 0; i < _TrialIds; i++) delete _trialAudienceMap[i];\\r\\n        for (uint256 i = 0; i < _SurveyIds; i++) delete _surveyMap[i];\\r\\n        for (uint256 i = 0; i < _SurveyCategoryIds; i++) delete _categoryMap[i];\\r\\n        for (uint256 i = 0; i < _TrialIds; i++) delete _sectionsMap[i];\\r\\n        for (uint256 i = 0; i < _UserIds; i++) delete _fhirMap[i];\\r\\n        for (uint256 i = 0; i < _OngoingIds; i++) delete _ongoingMap[i];\\r\\n        for (uint256 i = 0; i < _AnsweredIds; i++)\\r\\n            delete _questionanswerdMap[i];\\r\\n        for (uint256 i = 0; i < _CompletedSurveyIds; i++)\\r\\n            delete _completedsurveyMap[i];\\r\\n        _UserIds = 0;\\r\\n        _TrialIds = 0;\\r\\n        _SurveyIds = 0;\\r\\n        _SurveyCategoryIds = 0;\\r\\n        _OngoingIds = 0;\\r\\n        _AnsweredIds = 0;\\r\\n        _CompletedSurveyIds = 0;\\r\\n    }\\r\\n\\r\\n    function reset_app(uint256 user_id) public {\\r\\n        delete _userMap[user_id];\\r\\n        delete _fhirMap[user_id];\\r\\n        for (uint256 i = 0; i < _OngoingIds; i++) delete _ongoingMap[i];\\r\\n        for (uint256 i = 0; i < _AnsweredIds; i++)\\r\\n            delete _questionanswerdMap[i];\\r\\n        for (uint256 i = 0; i < _CompletedSurveyIds; i++)\\r\\n            delete _completedsurveyMap[i];\\r\\n        _UserIds = _UserIds - 1;\\r\\n        _OngoingIds = 0;\\r\\n        _AnsweredIds = 0;\\r\\n        _CompletedSurveyIds = 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x03eec6d3608f4085f0792aadce2bed7ac828ad4bc4a0b7e2a60ca790f178a73c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_categoryMap(uint256)": {
        "notice": "The map of all the Survey Category ."
      },
      "_completedsurveyMap(uint256)": {
        "notice": "The map of all the Completed Surveys."
      },
      "_fhirMap(uint256)": {
        "notice": "The map of all the FHIR information."
      },
      "_ongoingMap(uint256)": {
        "notice": "The map of all the OnGoing Trials."
      },
      "_questionanswerdMap(uint256)": {
        "notice": "The map of all the Question Answerd in a Survey."
      },
      "_sectionsMap(uint256)": {
        "notice": "The map of all the Survey Sections  ."
      },
      "_surveyMap(uint256)": {
        "notice": "The map of all the Surveys information."
      },
      "_trialAudienceMap(uint256)": {
        "notice": "The map of all the Rewards information."
      },
      "_trialMap(uint256)": {
        "notice": "The map of all the Trials information."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1220,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_UserIds",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1222,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_FhirIds",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1224,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_TrialIds",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1226,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_SurveyIds",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1228,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_SurveyCategoryIds",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1230,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_OngoingIds",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1232,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_AnsweredIds",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1234,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_CompletedSurveyIds",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1240,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_userMap",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(user_struct)1073_storage)"
      },
      {
        "astId": 1246,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_trialMap",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(trial_struct)1117_storage)"
      },
      {
        "astId": 1251,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_trialAudienceMap",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1257,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_surveyMap",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(survey_struct)1145_storage)"
      },
      {
        "astId": 1263,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_categoryMap",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(survey_category_struct)1080_storage)"
      },
      {
        "astId": 1268,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_sectionsMap",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1274,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_fhirMap",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(fhir_struct)1170_storage)"
      },
      {
        "astId": 1280,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_ongoingMap",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(ongoing_struct)1181_storage)"
      },
      {
        "astId": 1286,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_questionanswerdMap",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(survey_question_answer_struct)1196_storage)"
      },
      {
        "astId": 1292,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "_completedsurveyMap",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(completed_survey_struct)1207_storage)"
      },
      {
        "astId": 1294,
        "contract": "contracts/WaveData.sol:WaveData",
        "label": "owner",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(completed_survey_struct)1207_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WaveData.completed_survey_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(completed_survey_struct)1207_storage"
      },
      "t_mapping(t_uint256,t_struct(fhir_struct)1170_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WaveData.fhir_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(fhir_struct)1170_storage"
      },
      "t_mapping(t_uint256,t_struct(ongoing_struct)1181_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WaveData.ongoing_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(ongoing_struct)1181_storage"
      },
      "t_mapping(t_uint256,t_struct(survey_category_struct)1080_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WaveData.survey_category_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(survey_category_struct)1080_storage"
      },
      "t_mapping(t_uint256,t_struct(survey_question_answer_struct)1196_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WaveData.survey_question_answer_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(survey_question_answer_struct)1196_storage"
      },
      "t_mapping(t_uint256,t_struct(survey_struct)1145_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WaveData.survey_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(survey_struct)1145_storage"
      },
      "t_mapping(t_uint256,t_struct(trial_struct)1117_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WaveData.trial_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(trial_struct)1117_storage"
      },
      "t_mapping(t_uint256,t_struct(user_struct)1073_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WaveData.user_struct)",
        "numberOfBytes": "32",
        "value": "t_struct(user_struct)1073_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(completed_survey_struct)1207_storage": {
        "encoding": "inplace",
        "label": "struct WaveData.completed_survey_struct",
        "members": [
          {
            "astId": 1198,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "completed_survey_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1200,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "trial_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1202,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "user_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1204,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "survey_id",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1206,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "date",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(fhir_struct)1170_storage": {
        "encoding": "inplace",
        "label": "struct WaveData.fhir_struct",
        "members": [
          {
            "astId": 1148,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "user_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1151,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "family_name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1154,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "given_name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1157,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "identifier",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1160,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "phone",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1163,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "gender",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1166,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "about",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 1169,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "patient_id",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(ongoing_struct)1181_storage": {
        "encoding": "inplace",
        "label": "struct WaveData.ongoing_struct",
        "members": [
          {
            "astId": 1172,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "ongoing_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1174,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "trial_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1176,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "user_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1178,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "date",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1180,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "given_permission",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(survey_category_struct)1080_storage": {
        "encoding": "inplace",
        "label": "struct WaveData.survey_category_struct",
        "members": [
          {
            "astId": 1076,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1079,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "image",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(survey_question_answer_struct)1196_storage": {
        "encoding": "inplace",
        "label": "struct WaveData.survey_question_answer_struct",
        "members": [
          {
            "astId": 1183,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "answer_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1185,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "trial_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1187,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "user_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1189,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "survey_id",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1191,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "section_id",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1193,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "question_id",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1195,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "answer",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(survey_struct)1145_storage": {
        "encoding": "inplace",
        "label": "struct WaveData.survey_struct",
        "members": [
          {
            "astId": 1120,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "survey_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1123,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "trial_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1126,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "user_id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1129,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1132,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1135,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "date",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1138,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "image",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 1141,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "reward",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1144,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "submission",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(trial_struct)1117_storage": {
        "encoding": "inplace",
        "label": "struct WaveData.trial_struct",
        "members": [
          {
            "astId": 1083,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "trial_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1086,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "user_id",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1089,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "image",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1092,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "title",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1095,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1098,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "permission",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1101,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "contributors",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1104,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "audience",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1107,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "budget",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1110,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "reward_type",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 1113,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "reward_price",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 1116,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "total_spending_limit",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(user_struct)1073_storage": {
        "encoding": "inplace",
        "label": "struct WaveData.user_struct",
        "members": [
          {
            "astId": 1045,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "user_id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1048,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1051,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "email",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1054,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "password",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1057,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "walletaddress_address",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1060,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "privatekey",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1063,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "image",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 1066,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "credits",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1069,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "accesstoken",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 1072,
            "contract": "contracts/WaveData.sol:WaveData",
            "label": "fhirid",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}